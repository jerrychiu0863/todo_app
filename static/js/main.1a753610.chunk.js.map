{"version":3,"sources":["components/Navbar.js","components/ListItem.js","container/Main.js","actions/index.js","components/Button.js","container/Add.js","container/List.js","container/Edit.js","container/Search.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/form.js","reducers/todoLists.js","store/index.js","index.js"],"names":["Navbar","react_default","a","createElement","className","style","marginBottom","backgroundColor","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","react_router_dom","to","ListItem","props","lists","map","list","key","concat","title","timeStamp","connect","_ref","padding","maxHeight","overflowY","length","components_ListItem","handleTitleInput","value","payload","handleContentInput","clearInputValue","editTodoList","content","Button","onClick","children","addTodoLists","onFormSubmit","e","preventDefault","onSubmit","maxWidth","margin","htmlFor","placeholder","onChange","target","resize","rows","components_Button","state","deleteTodoList","selectedList","find","match","params","color","history","push","query","handleQueryInput","findListsByQuery","filter","toLowerCase","includes","App","components_Navbar","react_router","path","exact","component","Main","Add","List","Edit","Search","Boolean","window","location","hostname","reducers","combineReducers","arguments","undefined","action","_action$payload","cuid","Date","toLocaleString","substr","Object","toConsumableArray","_action$payload2","store","createStore","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a753610.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav\r\n      className=\"navbar navbar-expand-lg navbar-light\"\r\n      style={{ marginBottom: '20px', backgroundColor: 'lightblue' }}\r\n    >\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNavAltMarkup\"\r\n        aria-controls=\"navbarNavAltMarkup\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n        <div className=\"navbar-nav\">\r\n          <Link to=\"/\" className=\"nav-item nav-link active\">\r\n            Home\r\n          </Link>\r\n          <Link to=\"/add\" className=\"nav-item nav-link active\">\r\n            Add Todo Item\r\n          </Link>\r\n          <Link to=\"/search\" className=\"nav-item nav-link active\">\r\n            Search\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../css/ListItem.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ListItem = props => {\r\n  const { lists } = props;\r\n  \r\n  return (\r\n    <ul className=\"ListItem row\">\r\n      {lists.map(list => (\r\n        <li key={list.id} className=\"ListItem__item col-md-4\">\r\n          <div className=\"ListItem__cardContainer\">\r\n            <Link\r\n              to={`/list/${list.id}`}\r\n              className=\"ListItem__cardContainer--link\"\r\n            >\r\n              <h3 className=\"ListItem__cardContainer--title\">{list.title}</h3>\r\n            </Link>\r\n            <span className=\"ListItem__cardContainer--date\">\r\n              {list.timeStamp}\r\n            </span>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nListItem.propTypes = {\r\n  lists: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ListItem from '../components/ListItem';\r\n\r\nconst Main = props => {\r\n  const { lists } = props;\r\n\r\n  return (\r\n    <div style={{ padding: '0 20px', maxHeight: '85vh', overflowY: 'auto' }}>\r\n      <h1>Todo Lists</h1>\r\n      {lists.length !== 0 ? (\r\n        <ListItem lists={lists} />\r\n      ) : (\r\n        <p>Add Your Todo Lists!</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nMain.propTypes = {\r\n  lists: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = ({ lists }) => {\r\n  return { lists };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Main);\r\n","//Form actions\r\nexport const handleTitleInput = value => ({\r\n  type: 'ON_TITLE_INPUT_CHANGE',\r\n  payload: value\r\n});\r\n\r\nexport const handleContentInput = value => ({\r\n  type: 'ON_CONTENT_INPUT_CHANGE',\r\n  payload: value\r\n});\r\n\r\nexport const handleQueryInput = value => ({\r\n  type: 'ON_QUERY_INPUT_CHANGE',\r\n  payload: value\r\n});\r\n\r\nexport const clearInputValue = () => ({\r\n  type: 'CLEAR_INPUT_VALUE'\r\n});\r\n/*The End of Form Actions */\r\n\r\n//Todo Lists actions\r\nexport const addTodoLists = (title, content) => ({\r\n  type: 'ADD_TODO_LIST',\r\n  payload: {\r\n    title: title,\r\n    content: content\r\n  }\r\n});\r\n\r\nexport const editTodoList = (id, title, content) => ({\r\n  type: 'EDIT_TODO_LIST',\r\n  payload: {\r\n    id,\r\n    title,\r\n    content\r\n  }\r\n});\r\n\r\nexport const deleteTodoList = id => ({\r\n  type: 'DELETE_TODO_LIST',\r\n  payload: id\r\n});\r\n/*The End of Lists Actions */\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = props => {\r\n  const { className, onClick, children } = props;\r\n  \r\n  return (\r\n    <button type=\"button\" className={`btn ${className} mr-2`} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n  children: PropTypes.element.isRequired\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  handleTitleInput,\r\n  handleContentInput,\r\n  addTodoLists,\r\n  clearInputValue\r\n} from '../actions';\r\n\r\nimport Button from '../components/Button';\r\n\r\nconst Add = props => {\r\n  const {\r\n    title,\r\n    content,\r\n    handleTitleInput,\r\n    handleContentInput,\r\n    addTodoLists,\r\n    clearInputValue\r\n  } = props;\r\n\r\n  const onFormSubmit = e => {\r\n    e.preventDefault();\r\n    addTodoLists(title, content);\r\n    clearInputValue();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onFormSubmit} style={{ maxWidth: '70%', margin: '0 auto' }}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter Title\"\r\n          value={title}\r\n          onChange={e => handleTitleInput(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"content\">Todo Lists</label>\r\n        <textarea\r\n          style={{ resize: 'none' }}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter Todo Lists\"\r\n          value={content}\r\n          rows=\"10\"\r\n          onChange={e => handleContentInput(e.target.value)}\r\n        />\r\n      </div>\r\n      <Button className={'btn-info'} onClick={onFormSubmit}>\r\n        Add Todo List\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAdd.propTypes = {\r\n  title: PropTypes.string,\r\n  content: PropTypes.string,\r\n  handleTitleInput: PropTypes.func.isRequired,\r\n  handleContentInput: PropTypes.func.isRequired,\r\n  addTodoLists: PropTypes.func.isRequired,\r\n  clearInputValue: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = ({ title, content }) => {\r\n  return { title, content };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { handleTitleInput, handleContentInput, addTodoLists, clearInputValue }\r\n)(Add);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../css/List.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { editTodoList, deleteTodoList } from '../actions';\r\n\r\nimport Button from '../components/Button';\r\n\r\nconst List = props => {\r\n  const { lists, editTodoList, deleteTodoList } = props;\r\n  //Find list by id of url\r\n  const selectedList = lists.find(list => list.id === props.match.params.id);\r\n  //Func to delelte list and navigate user to landing page\r\n  const deleteList = id => {\r\n    deleteTodoList(id);\r\n    //Direct user to landing page\r\n    props.history.push('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"List\">\r\n      <h3>{selectedList.title}</h3>\r\n      <p className=\"List--content\">{selectedList.content}</p>\r\n      <Button\r\n        className={'btn-info'}\r\n        onClick={() =>\r\n          editTodoList(null, selectedList.title, selectedList.content)\r\n        }\r\n      >\r\n        <Link to={`/edit/${selectedList.id}`} style={{ color: '#fff' }}>\r\n          Edit\r\n        </Link>\r\n      </Button>\r\n      <Button\r\n        className={'btn-outline-info'}\r\n        onClick={() => deleteList(selectedList.id)}\r\n      >\r\n        Delete\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nList.propTypes = {\r\n  lists: PropTypes.array.isRequired,\r\n  editTodoList: PropTypes.func.isRequired,\r\n  deleteTodoList: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { editTodoList, deleteTodoList }\r\n)(List);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  handleTitleInput,\r\n  handleContentInput,\r\n  editTodoList,\r\n  clearInputValue\r\n} from '../actions';\r\n\r\nimport Button from '../components/Button';\r\n\r\nconst Edit = props => {\r\n  const { title, content, handleTitleInput, handleContentInput } = props;\r\n  \r\n  const onEditBtnSubmit = e => {\r\n    e.preventDefault();\r\n    //Get id from url\r\n    const id = props.match.params.id;\r\n    const title = props.title;\r\n    const content = props.content;\r\n    props.editTodoList(id, title, content);\r\n    props.clearInputValue();\r\n  };\r\n\r\n  return (\r\n    <form style={{ maxWidth: '70%', margin: '0 auto' }}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter Title\"\r\n          value={title}\r\n          onChange={e => handleTitleInput(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"content\">Todo Lists</label>\r\n        <textarea\r\n          style={{ resize: 'none' }}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Enter Todo Lists\"\r\n          value={content}\r\n          rows=\"10\"\r\n          onChange={e => handleContentInput(e.target.value)}\r\n        />\r\n      </div>\r\n      <Button className={'btn-info'} onClick={onEditBtnSubmit}>\r\n        Edit\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nEdit.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  content: PropTypes.string.isRequired,\r\n  handleTitleInput: PropTypes.func.isRequired,\r\n  handleContentInput: PropTypes.func.isRequired,\r\n  editTodoList: PropTypes.func.isRequired,\r\n  clearInputValue: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { handleTitleInput, handleContentInput, editTodoList, clearInputValue }\r\n)(Edit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../css/Search.css';\r\nimport { connect } from 'react-redux';\r\nimport { handleQueryInput } from '../actions';\r\n\r\nimport ListItem from '../components/ListItem';\r\n\r\nconst Search = props => {\r\n  const { lists, query, handleQueryInput } = props;\r\n  \r\n  const findListsByQuery = lists.filter(list =>\r\n    list.title.toLowerCase().includes(query) ? list : null\r\n  );\r\n\r\n  return (\r\n    <div className=\"Search\">\r\n      <div className=\"Search--input form-group\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Searching...\"\r\n          value={query}\r\n          onChange={e => handleQueryInput(e.target.value)}\r\n        />\r\n      </div>\r\n      <ListItem lists={findListsByQuery} />\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.propTypes = {\r\n  query: PropTypes.string,\r\n  lists: PropTypes.array.isRequired,\r\n  handleQueryInput: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = ({ query, lists }) => {\r\n  return { query, lists };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { handleQueryInput }\r\n)(Search);\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport '../css/App.css';\n\n//Components\nimport Navbar from './Navbar';\nimport Main from '../container/Main';\nimport Add from '../container/Add';\nimport List from '../container/List';\nimport Edit from '../container/Edit';\nimport Search from '../container/Search';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Route path=\"/\" exact component={Main} />\n      <Route path=\"/add\" component={Add} />\n      <Route path=\"/list/:id\" component={List} />\n      <Route path=\"/edit/:id\" component={Edit} />\n      <Route path=\"/search\" component={Search} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\n//Reducers\r\nimport { title, content, query } from './form';\r\nimport { todoLists } from './todoLists';\r\n\r\nconst reducers = combineReducers({\r\n  title,\r\n  content,\r\n  query,\r\n  lists: todoLists\r\n});\r\n\r\nexport default reducers;\r\n","export const title = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'ON_TITLE_INPUT_CHANGE':\r\n      return action.payload;\r\n\r\n    //Pass value to input from selected list\r\n    case 'EDIT_TODO_LIST':\r\n      return action.payload.title;\r\n\r\n    case 'CLEAR_INPUT_VALUE':\r\n      return '';\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const content = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'ON_CONTENT_INPUT_CHANGE':\r\n      return action.payload;\r\n\r\n    //Pass value to input from selected list\r\n    case 'EDIT_TODO_LIST':\r\n      return action.payload.content;\r\n    \r\n    case 'CLEAR_INPUT_VALUE':\r\n        return '';\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const query = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'ON_QUERY_INPUT_CHANGE':\r\n      return action.payload;\r\n  \r\n      default:\r\n      return state;\r\n  }\r\n};\r\n","import cuid from 'cuid';\r\n\r\nexport const todoLists = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO_LIST':\r\n      const { title, content } = action.payload;\r\n      const newLists = [\r\n        {\r\n          id: cuid(),\r\n          title,\r\n          content,\r\n          timeStamp: new Date().toLocaleString().substr(0, 9) //Get MM/DD/Year\r\n        },\r\n        ...state\r\n      ];\r\n      return newLists;\r\n\r\n    case 'EDIT_TODO_LIST':\r\n      const { id } = action.payload;\r\n      //Find list by id and overwrite the title and content\r\n      const editedLists = state.filter(list => {\r\n        if (list.id === id) {\r\n          const { title, content } = action.payload;\r\n          list.title = title;\r\n          list.content = content;\r\n        }\r\n        return list;\r\n      });\r\n      return editedLists;\r\n\r\n    case 'DELETE_TODO_LIST':\r\n      //Remove the list with the same id\r\n      const updatedLists = state.filter(list => list.id !== action.payload);\r\n      return updatedLists;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from 'redux';\r\nimport reducers from '../reducers';\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}